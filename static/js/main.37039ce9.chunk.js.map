{"version":3,"sources":["store/postsListSlice.ts","store/postDetailsSlice.ts","api/api.ts","api/posts.ts","store/index.ts","components/Loader/Loader.tsx","components/PostsList/PostsList.tsx","api/comments.ts","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","components/WrongPage/WrongPage.tsx","components/NewPostForm/NewPostForm.tsx","components/UpdatePostForm/UpdatePostForm.tsx","App.tsx","index.tsx"],"names":["SET_POSTS","SET_SELECTED_POST_ID","setPosts","posts","type","payload","setSelectedPostId","id","initialState","selectedPostId","postsReducer","state","action","SET_POST_DETAILS","body","title","comments","postDetailsReducer","BASE_URL","getPostDetails","postId","a","url","fetch","response","json","getAllPosts","addNewPost","data","method","headers","JSON","stringify","deletePost","updatePost","rootReducer","combineReducers","postsListSlice","postDetailsSlice","getPostsFromServer","dispatch","console","log","getPostDetailsFromServer","postDetails","store","createStore","composeWithDevTools","applyMiddleware","thunk","Loader","className","PostsList","useState","loading","setLoading","error","setError","useDispatch","useSelector","navigate","useNavigate","useEffect","handleOpenPost","event","currentTarget","name","handleDeletePost","handleUpdatePost","to","isActive","length","map","post","classNames","String","onClick","postComment","bodyForComment","deleteComment","NewCommentForm","setBodyForComment","handleBodyInput","target","value","handleAddComment","preventDefault","onSubmit","placeholder","onChange","required","PostDetails","commentsLoading","setCommentsLoading","commentsVisible","setCommentsVisible","selectedPostDetails","toggleComments","deleteHandler","comment","WrongPage","NewPostForm","postBody","setPostBody","postTitle","setPostTitle","handleAddPost","UpdatePostForm","useLocation","App","path","element","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.37039ce9.chunk.js","sourcesContent":["import { AnyAction } from 'redux';\n// Action types\nconst SET_POSTS = 'SET_POSTS';\nconst SET_SELECTED_POST_ID = 'SET_SELECTED_POST_ID';\n\n// Action creators\nexport const setPosts = (posts: Post[]) => ({ type: SET_POSTS, payload: posts });\nexport const setSelectedPostId = (id: number) => ({ type: SET_SELECTED_POST_ID, payload: id });\n\nconst initialState: PostsListSlice = {\n  posts: [],\n  selectedPostId: 0,\n};\n\nconst postsReducer = (state = initialState, action: AnyAction) => {\n  switch (action.type) {\n    case SET_POSTS:\n      return {\n        ...state,\n        posts: action.payload,\n      };\n\n    case SET_SELECTED_POST_ID:\n      return {\n        ...state,\n        selectedPostId: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default postsReducer;\n","import { AnyAction } from 'redux';\n// Action types\nconst SET_POST_DETAILS = 'SET_POST_DETAILS';\n\n// Action creators\nexport const setPostDetails = (posts: Post[]) => ({ type: SET_POST_DETAILS, payload: posts });\n\nconst initialState: PostDetailsSlice = {\n  body: '',\n  id: 0,\n  title: '',\n  comments: [],\n};\n\nconst postDetailsReducer = (state = initialState, action: AnyAction) => {\n  switch (action.type) {\n    case SET_POST_DETAILS:\n      return {\n        ...state,\n        ...action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default postDetailsReducer;\n","export const BASE_URL = 'https://bloggy-api.herokuapp.com';\n","import { BASE_URL } from './api';\n\nexport const getPostDetails = async (postId: number) => {\n  if (postId !== 0) {\n    const url = `${BASE_URL}/posts/${postId}?_embed=comments`;\n    const response = await fetch(url);\n\n    return response.json();\n  }\n\n  return {\n    body: '',\n    id: 0,\n    title: '',\n    comments: [],\n  };\n};\n\nexport const getAllPosts = async () => {\n  const url = `${BASE_URL}/posts/`;\n  const response = await fetch(url);\n\n  return response.json();\n};\n\nexport const addNewPost = async (\n  title: string,\n  body: string,\n) => {\n  const data = {\n    title,\n    body,\n  };\n\n  const url = `${BASE_URL}/posts`;\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(data),\n  });\n\n  return response.json();\n};\n\nexport const deletePost = async (postId: string) => {\n  const url = `${BASE_URL}/posts/${postId}`;\n\n  const response = await fetch(url, {\n    method: 'DELETE',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  });\n\n  return response.json();\n};\n\nexport const updatePost = async (\n  id: string,\n  title: string,\n  body: string,\n) => {\n  const data = {\n    title,\n    body,\n  };\n\n  const url = `${BASE_URL}/posts/${id}`;\n  const response = await fetch(url, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(data),\n  });\n\n  return response.json();\n};\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport { Dispatch } from 'react';\nimport postsReducer, { setPosts } from './postsListSlice';\nimport postDetailsReducer, { setPostDetails } from './postDetailsSlice';\nimport { getPostDetails, getAllPosts } from '../api/posts';\n\nconst rootReducer = combineReducers({\n  postsListSlice: postsReducer,\n  postDetailsSlice: postDetailsReducer,\n});\n\n/**\n * Thunk - is a function that should be used as a normal action creator\n *\n * dispatch(loadMessage())\n */\nexport const getPostsFromServer = () => {\n  // inner function is an action handled by Redux Thunk\n  return async (dispatch: Dispatch<any>) => {\n    try {\n      const posts = await getAllPosts();\n\n      dispatch(setPosts(posts));\n    } catch (error) {\n      // eslint-disable-next-line no-console\n      console.log('error loading posts', error);\n    }\n  };\n};\n\nexport const getPostDetailsFromServer = (selectedPostId: number) => {\n  // inner function is an action handled by Redux Thunk\n  return async (dispatch: Dispatch<any>) => {\n    try {\n      const postDetails = await getPostDetails(selectedPostId);\n\n      dispatch(setPostDetails(postDetails));\n    } catch (error) {\n      // eslint-disable-next-line no-console\n      console.log('error loading details', error);\n    }\n  };\n};\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk)),\n);\n\nexport default store;\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { NavLink, useNavigate } from 'react-router-dom';\nimport classNames from 'classnames';\nimport { getPostsFromServer } from '../../store/index';\nimport { setSelectedPostId } from '../../store/postsListSlice';\nimport { deletePost } from '../../api/posts';\nimport { Loader } from '../Loader';\n\nimport './PostsList.scss';\n\nexport const PostsList = () => {\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n\n  const dispatch = useDispatch();\n  const {\n    selectedPostId,\n    posts,\n  } = useSelector((state: PostsState) => state.postsListSlice);\n\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    (async () => {\n      setLoading(true);\n      setError('');\n      try {\n        await dispatch(getPostsFromServer());\n      } catch {\n        setError('Some error ocurred while connecting the server');\n      }\n\n      setLoading(false);\n    })();\n  }, []);\n\n  const handleOpenPost = (event: React.MouseEvent<HTMLButtonElement>) => {\n    dispatch(setSelectedPostId(+event.currentTarget.name));\n  };\n\n  const handleDeletePost = async (event: React.MouseEvent<HTMLButtonElement>) => {\n    setLoading(true);\n    try {\n      await deletePost(event.currentTarget.name);\n      await dispatch(getPostsFromServer());\n    } catch {\n      setError('Server did not respond');\n    }\n\n    setLoading(false);\n\n    dispatch(setSelectedPostId(0));\n  };\n\n  const handleUpdatePost = async (event: React.MouseEvent<HTMLButtonElement>) => {\n    const id: string = event.currentTarget.name;\n\n    navigate('/update-post-form', { state: id });\n\n    dispatch(setSelectedPostId(0));\n  };\n\n  const getVisiblePosts = () => {\n    if (posts.length !== 0 && loading === false) {\n      return (\n        posts.map(post => (\n          <li className=\"PostsList__item\" key={post.id}>\n            {post.title}\n\n            <div>\n              <button\n                type=\"button\"\n                className={classNames(\n                  'PostsList__button',\n                  'button',\n                  { 'PostsList__button--opened': selectedPostId === post.id },\n                )}\n                name={String(post.id)}\n                onClick={handleOpenPost}\n              >\n                Open\n              </button>\n\n              <button\n                type=\"button\"\n                className=\"PostsList__button\"\n                name={String(post.id)}\n                onClick={handleUpdatePost}\n              >\n                Update\n              </button>\n\n              <button\n                type=\"button\"\n                className=\"PostsList__button\"\n                name={String(post.id)}\n                onClick={handleDeletePost}\n              >\n                Delete\n              </button>\n            </div>\n          </li>\n        ))\n      );\n    }\n\n    if (posts.length === 0 && loading === false) {\n      return (<span>There are no posts yet. You can add your own.</span>);\n    }\n\n    return (<Loader />);\n  };\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n      <NavLink\n        to=\"/new-post-form\"\n        className={({\n          isActive,\n        }) => `navbar-item is-tab nav-link ${isActive ? ' active' : ''}`}\n      >\n        <button type=\"button\">Add new post</button>\n      </NavLink>\n\n      <div className=\"error\">{error}</div>\n\n      <ul className=\"PostsList__list\">\n        {getVisiblePosts()}\n      </ul>\n    </div>\n  );\n};\n","import { BASE_URL } from './api';\n\nexport const postComment = async (\n  postId: number,\n  bodyForComment: string,\n) => {\n  const data = {\n    postId,\n    body: bodyForComment,\n  };\n  const url = `${BASE_URL}/comments`;\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(data),\n  });\n\n  return response.json();\n};\n\nexport const deleteComment = async (postId: string) => {\n  const url = `${BASE_URL}/comments/${postId}`;\n\n  const response = await fetch(url, {\n    method: 'DELETE',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  });\n\n  return response.json();\n};\n","import React, { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { postComment } from '../../api/comments';\nimport { getPostDetailsFromServer } from '../../store/index';\nimport { Loader } from '../Loader';\nimport './NewCommentForm.scss';\n\nexport const NewCommentForm: React.FC = () => {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [bodyForComment, setBodyForComment] = useState<string>('');\n\n  const dispatch = useDispatch();\n  const selectedPostId = useSelector((state: PostsState) => state.postsListSlice.selectedPostId);\n\n  const handleBodyInput = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setBodyForComment(event.target.value);\n  };\n\n  const handleAddComment = async (event: React.FormEvent) => {\n    event.preventDefault();\n    setLoading(true);\n    setError('');\n    try {\n      await postComment(selectedPostId, bodyForComment);\n    } catch {\n      setError('Failed to post a comment');\n    }\n\n    setLoading(false);\n    setBodyForComment('');\n\n    dispatch(getPostDetailsFromServer(selectedPostId));\n  };\n\n  const getForm = () => {\n    if (loading === false) {\n      return (\n        <form className=\"NewCommentForm\" onSubmit={handleAddComment}>\n          <div className=\"error\">{error}</div>\n\n          <div className=\"form-field\">\n            <textarea\n              name=\"body\"\n              placeholder=\"Type comment here\"\n              className=\"NewCommentForm__input\"\n              value={bodyForComment}\n              onChange={handleBodyInput}\n              required\n            />\n          </div>\n\n          <button\n            type=\"submit\"\n            className=\"NewCommentForm__submit-button\"\n          >\n            Add a comment\n          </button>\n        </form>\n      );\n    }\n\n    return <Loader />;\n  };\n\n  return getForm();\n};\n","import React, { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getPostDetailsFromServer } from '../../store/index';\nimport { NewCommentForm } from '../NewCommentForm';\nimport { Loader } from '../Loader';\nimport { deleteComment } from '../../api/comments';\nimport './PostDetails.scss';\n\nexport const PostDetails: React.FC = () => {\n  const [error, setError] = useState('');\n  const [loading, setLoading] = useState(true);\n  const [commentsLoading, setCommentsLoading] = useState(false);\n  const [commentsVisible, setCommentsVisible] = useState(false);\n\n  const dispatch = useDispatch();\n  const selectedPostId = useSelector((state: PostsState) => state.postsListSlice.selectedPostId);\n  const selectedPostDetails = useSelector((state: PostsState) => state.postDetailsSlice);\n  const comments = useSelector((state: PostsState) => state.postDetailsSlice.comments);\n\n  useEffect(() => {\n    (async () => {\n      setLoading(true);\n      setError('');\n      try {\n        await dispatch(getPostDetailsFromServer(selectedPostId));\n      } catch {\n        setError('Some error ocurred while connecting the server');\n      }\n\n      setLoading(false);\n    })();\n  }, [selectedPostId]);\n\n  const toggleComments = () => {\n    setCommentsVisible(!commentsVisible);\n  };\n\n  const getCommentsButton = () => {\n    if (comments && comments.length > 0) {\n      return (\n        <button\n          type=\"button\"\n          className=\"button\"\n          onClick={toggleComments}\n        >\n          {!commentsVisible\n            ? `Show ${comments.length} comments`\n            : `Hide ${comments.length} comments`}\n        </button>\n      );\n    }\n\n    return (\n      <span>No comments found</span>\n    );\n  };\n\n  const deleteHandler = async (event: React.MouseEvent<HTMLButtonElement>) => {\n    setCommentsLoading(true);\n    try {\n      await deleteComment(event.currentTarget.name);\n      await dispatch(getPostDetailsFromServer(selectedPostId));\n    } catch {\n      setError('Having trouble connecting to the server');\n    }\n\n    setCommentsLoading(false);\n  };\n\n  const getPostDetails = () => {\n    if (selectedPostId !== 0 && loading === false) {\n      return (\n        <>\n          <section className=\"PostDetails__post\">\n            <h3>{selectedPostDetails && selectedPostDetails.title}</h3>\n            <p>{selectedPostDetails && selectedPostDetails.body}</p>\n          </section>\n\n          {commentsLoading === true\n            ? (<Loader />)\n            : (\n              <section className=\"PostDetails__comments\">\n                {getCommentsButton()}\n\n                <ul className=\"PostDetails__list\">\n                  {comments && commentsVisible && comments.map(comment => (\n                    <li className=\"PostDetails__list-item\" key={comment.id}>\n                      <button\n                        type=\"button\"\n                        className=\"PostDetails__remove-button\"\n                        name={String(comment.id)}\n                        onClick={deleteHandler}\n                      >\n                        X\n                      </button>\n                      <p>{comment.body}</p>\n                    </li>\n                  ))}\n                </ul>\n              </section>\n            )}\n          <section>\n            <div className=\"PostDetails__form-wrapper\">\n              <NewCommentForm />\n            </div>\n          </section>\n        </>\n      );\n    }\n\n    return (<Loader />);\n  };\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <div className=\"error\">{error}</div>\n\n      {selectedPostId !== 0 ? (\n        getPostDetails()\n      ) : (\n        <span>Please select a post to see details</span>\n      )}\n    </div>\n  );\n};\n","export const WrongPage = () => (\n  <div>\n    Sorry... We do not have such page :(\n  </div>\n);\n","import React, { useState } from 'react';\nimport { useNavigate, NavLink } from 'react-router-dom';\nimport { addNewPost } from '../../api/posts';\nimport './NewPostForm.scss';\n\nexport const NewPostForm: React.FC = () => {\n  const [error, setError] = useState('');\n  const [postBody, setPostBody] = useState<string>('');\n  const [postTitle, setPostTitle] = useState<string>('');\n\n  const navigate = useNavigate();\n\n  const handleTitleInput = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setPostTitle(event.target.value);\n  };\n\n  const handleBodyInput = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setPostBody(event.target.value);\n  };\n\n  const handleAddPost = async (event: React.FormEvent) => {\n    event.preventDefault();\n    setError('');\n    try {\n      await addNewPost(postTitle, postBody);\n    } catch {\n      setError('Failed to create new post');\n    }\n\n    setPostBody('');\n    setPostTitle('');\n    if (error === '') {\n      navigate('/');\n    }\n  };\n\n  return (\n    <div className=\"NewPostForm\">\n      <NavLink\n        to=\"/\"\n        className={({\n          isActive,\n        }) => `navbar-item is-tab nav-link ${isActive ? ' active' : ''}`}\n      >\n        <button type=\"button\">To home page</button>\n      </NavLink>\n\n      <div className=\"error\">{error}</div>\n      <div className=\"NewPostForm__form-wrapper\">\n        <form className=\"NewPostForm__form\" onSubmit={handleAddPost}>\n          <div className=\"form-field\">\n            <input\n              type=\"text\"\n              name=\"name\"\n              placeholder=\"Post title\"\n              className=\"NewPostForm__input\"\n              value={postTitle}\n              onChange={handleTitleInput}\n              required\n            />\n          </div>\n\n          <div className=\"form-field\">\n            <textarea\n              name=\"body\"\n              placeholder=\"Post text\"\n              className=\"NewPostForm__input\"\n              value={postBody}\n              onChange={handleBodyInput}\n              required\n            />\n          </div>\n\n          <button\n            type=\"submit\"\n            className=\"NewPostForm__submit-button\"\n          >\n            Add new post\n          </button>\n        </form>\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport { useNavigate, useLocation, NavLink } from 'react-router-dom';\n\nimport './UpdatePostForm.scss';\nimport { updatePost } from '../../api/posts';\n\nexport const UpdatePostForm: React.FC = () => {\n  const navigate = useNavigate();\n  const state = useLocation();\n  const id = state.state;\n\n  const [postBody, setPostBody] = useState<string>('');\n  const [postTitle, setPostTitle] = useState<string>('');\n  const [error, setError] = useState('');\n\n  const handleTitleInput = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setPostTitle(event.target.value);\n  };\n\n  const handleBodyInput = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setPostBody(event.target.value);\n  };\n\n  const handleUpdatePost = async (event: React.FormEvent) => {\n    event.preventDefault();\n    setError('');\n    try {\n      await updatePost(\n        id as string,\n        postTitle,\n        postBody,\n      );\n    } catch {\n      setError('Some error ocurred while connecting the server');\n    }\n\n    setPostBody('');\n    setPostTitle('');\n\n    if (error === '') {\n      navigate('/');\n    }\n  };\n\n  return (\n    <div className=\"UpdatePostForm\">\n      <NavLink\n        to=\"/\"\n        className={({\n          isActive,\n        }) => `navbar-item is-tab nav-link ${isActive ? ' active' : ''}`}\n      >\n        <button type=\"button\">To home page</button>\n\n        <div className=\"error\">{error}</div>\n      </NavLink>\n      <div className=\"UpdatePostForm__form-wrapper\">\n        <form className=\"UpdatePostForm__form\" onSubmit={handleUpdatePost}>\n          <div className=\"form-field\">\n            <input\n              type=\"text\"\n              name=\"name\"\n              placeholder=\"Post title\"\n              className=\"UpdatePostForm__input\"\n              value={postTitle}\n              onChange={handleTitleInput}\n              required\n            />\n          </div>\n\n          <div className=\"form-field\">\n            <textarea\n              name=\"body\"\n              placeholder=\"Post text\"\n              className=\"UpdatePostForm__input\"\n              value={postBody}\n              onChange={handleBodyInput}\n              required\n            />\n          </div>\n\n          <button\n            type=\"submit\"\n            className=\"UpdatePostForm__submit-button\"\n          >\n            Update post\n          </button>\n        </form>\n      </div>\n    </div>\n  );\n};\n","import { Route, Routes } from 'react-router-dom';\nimport React from 'react';\nimport './App.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { WrongPage } from './components/WrongPage';\nimport { NewPostForm } from './components/NewPostForm';\nimport { UpdatePostForm } from './components/UpdatePostForm';\n\nconst App: React.FC = () => {\n  const getPostsBlock = () => {\n    return (\n      <main className=\"App__main\">\n        <div className=\"App__content\">\n          <PostsList />\n        </div>\n\n        <div className=\"App__sidebar\">\n          <PostDetails />\n        </div>\n      </main>\n    );\n  };\n\n  return (\n    <div className=\"App\">\n      <Routes>\n        <Route path=\"/\" element={getPostsBlock()} />\n        <Route path=\"/new-post-form\" element={<NewPostForm />} />\n        <Route path=\"/update-post-form\" element={<UpdatePostForm />} />\n        <Route path=\"*\" element={<WrongPage />} />\n      </Routes>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter } from 'react-router-dom';\n\nimport App from './App';\nimport store from './store';\n\nconst Root = () => (\n  <Provider store={store}>\n    <HashRouter>\n      <App />\n    </HashRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}